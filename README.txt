Readme:

	Ορφανίδης Ελευθέριος
	Α.Μ.: 1115201400133

Compile: Για να γινει compile to προγραμμα τρεξε την εντολη make.

Run: ./stucs -l operations -b hashentries
	- operations : το ονομα του input αρχειου
	- hashentries: ο αριθμος των θεσεων που θα εχει το hash table

1. Insert: Κατα την εισαγωγη δημιουργειται αρχικα ο student και μετα χρησιμοποιωντας ενα δεικτη στον student που δημιουργηθηκε γινεται εισαγωγη αρχικα στην skip list και μετα στο hash table . Στην περιπτωση που παει να εισαχθει στην skip list student του οποιου το id υπαρχει ηδη στην λιστα τοτε διαγραφεται ο student που προσπαθει να εισαχθει και δεν γινεται προσπαθεια εισαγωγης του στο hash table.

2. Question: Γινεται αναζητηση στην skip list και αν βρεθει τυπωνεται ο μαθητης.

3. Change GPA: Γινεται αναζητηση στην skiplist και αλλαζουν οι τιμες gpa και numofcourses του φοιτητη που επιστρεφει η συναρτηση SearchSkip.

4. Delete: Η DeleteSkipNode κανει αναζητηση στην skiplist βασει ενος id και αν βρεθει ο φοιτητης τον διαγραφει χρησιμοποιωντας τον πινακα update[MaxLevel] για να φτιαξει τους forward pointers αφου φυγει ο κομβος. 

5. Average StudidA StudidB: Η SearchStudidAB κανει μια αναζητηση στην skiplist μεχρι να βρει τον StudidA(ή τον κομβο με την αμεσως μεγαλυτερη τιμη id σε περιπτωση που δεν υπαρχει η τιμη studidA στην λιστα).Μετα κανει αλλη μια αναζητηση μεχρι να βρει τον studidB ή τον φοιτητη με το αμεσως μικροτερο id.Τελος ελεγχει ολους του κομβους της skiplist .

6. Average Postcode: Διατρεχει μια φορα ενα συγκεκριμενο entry του hash table και για οποιον φοιτητη εχει το ιδιο postcode με αυτο που δωθηκε απο το αρχειο (υπαρχει η πιθανοτητα του collision) προσθετει σε μια μεταβλητη το gpa του και αυξανει το συνολο των φοιτητων που ζουν στο postcode. Ο(k)

7. Taverage Postcode: Διατρεχει μια φορα ενα entry του hash table (αναλογα με το postcode) και ενω το τρεχει αποθηκευει σε ενα βοηθητικο τοπικο πινακα τους k κορυφαιους φοιτητες βασει του gpa τους.Μετα χρησιμοποιωντας bubble sort τους εμφανιζει σε αυξουσα σειρα. Ο(k) να βρει ποιοι ειναι οι φοιτητες και O(k^2) να γινουν sort με την bubble sort.

8. Bottom k: Κανει το ιδιο με την Taverage Postcode χρησιμοποιωντας παλι βοηθητικο πινακα, αλλα αυτη την φορα διατρεχει την skiplist.

9. Courses to take: Διατρεχει ενα συγκεκριμενο entry του hashtable και για καθε φοιτητη που εχει το postcode που αναζητουμε προσθετει σε μια μεταβλητη το numofcourses του. 

10. Find Gpa: Διατρεχει ολη την skiplist μεχρι να βρει τον μεγιστο numofcourses. Μετα διατρεχει παλι ολη την skiplist και ελεγχει για καθε φοιτητη αν εχει numofcourses= maxnumofcourses και μεσο ορο μεγαλυτερο απο αυτον που δωθηκε απο το file . Ο(n)

11. Percentile Postcode: Διατρεχει μια φορα ενα entry του hash table (αναλογα με το postcode) και βρισκει το συνολο των φοιτητων που ζουν εκει. Διαιρει το συνολο αυτο με το συνολο των φοιτητων που εχουν εισαχθει στο hash table (το struct hash table εχει μια μεταβλητη entries η οποια σε καθε εισαγωγη γινεται ++ και σε καθε διαγραφει γινεται --). Ο(k)

12. Percentiles: Δημιουργω δυναμικα εναν πινακα στον οποιο αποθηκευω τα διαφορετικα postcode που βρισκω ενω διατρεχω στην skiplist για να ελεγξω ολα τα διαφορετικα postcode.Για καθε postcode που βρισκω:
	-ελεγχω αν υπαρχει στον πινακα του postcode
	-αν δεν υπαρχει τον εισαγω στον πινακα και καλω την συναρτηση που χρησιμοποιω και στο παραπανω ερωτημα για να βρω το ποσοστο( διατρεχει δηλαδη ενα συγκεκριμενο entry του hash)
	-αν υπαρχει τοτε συνεχιζω στο επομενο entry
	-τελος ελεγχω αν το μεγεθος του πινακα ειναι αρκετο για να γινει και αλλη εισαγωγη, αν δεν ειναι κανω realloc και διπλασιαζω το μεγεθος του( το διπλασιαζω για να μην εχω πολλες κλησεις της realloc η οποια ειναι πολυ χρονοβορα).Ο(n*k)
